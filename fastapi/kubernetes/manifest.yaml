apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    autopilot.gke.io/resource-adjustment: >-
      {"input":{"containers":[{"limits":{"cpu":"300m","memory":"400Mi"},"requests":{"cpu":"150m","memory":"200Mi"},"name":"backend"}]},"output":{"containers":[{"limits":{"cpu":"250m","ephemeral-storage":"1Gi","memory":"512Mi"},"requests":{"cpu":"250m","ephemeral-storage":"1Gi","memory":"512Mi"},"name":"backend"}]},"modified":true}
    autopilot.gke.io/warden-version: 2.8.81
  labels:
    app: backend
  managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:labels':
            .: {}
            'f:app': {}
        'f:spec':
          'f:progressDeadlineSeconds': {}
          'f:replicas': {}
          'f:revisionHistoryLimit': {}
          'f:selector': {}
          'f:strategy':
            'f:rollingUpdate':
              .: {}
              'f:maxSurge': {}
              'f:maxUnavailable': {}
            'f:type': {}
          'f:template':
            'f:metadata':
              'f:labels':
                .: {}
                'f:app': {}
            'f:spec':
              'f:automountServiceAccountToken': {}
              'f:containers':
                'k:{"name":"backend"}':
                  .: {}
                  'f:image': {}
                  'f:imagePullPolicy': {}
                  'f:name': {}
                  'f:ports':
                    .: {}
                    'k:{"containerPort":80,"protocol":"TCP"}':
                      .: {}
                      'f:containerPort': {}
                      'f:protocol': {}
                  'f:resources':
                    .: {}
                    'f:limits':
                      .: {}
                      'f:cpu': {}
                      'f:memory': {}
                    'f:requests':
                      .: {}
                      'f:cpu': {}
                      'f:memory': {}
                  'f:terminationMessagePath': {}
                  'f:terminationMessagePolicy': {}
              'f:dnsPolicy': {}
              'f:enableServiceLinks': {}
              'f:restartPolicy': {}
              'f:schedulerName': {}
              'f:securityContext': {}
              'f:serviceAccount': {}
              'f:serviceAccountName': {}
              'f:shareProcessNamespace': {}
              'f:terminationGracePeriodSeconds': {}
      manager: HashiCorp
      operation: Update
      time: '2024-05-30T12:03:28Z'
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:deployment.kubernetes.io/revision': {}
        'f:status':
          'f:availableReplicas': {}
          'f:conditions':
            .: {}
            'k:{"type":"Available"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
            'k:{"type":"Progressing"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
          'f:observedGeneration': {}
          'f:readyReplicas': {}
          'f:replicas': {}
          'f:updatedReplicas': {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: '2024-05-31T17:38:41Z'
  name: backend
  namespace: demo-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
    spec:
      automountServiceAccountToken: true
      containers:
        - image: europe-west9-docker.pkg.dev/incubation-ids/demo-gke-repo/fastapi:latest
          imagePullPolicy: Always
          name: backend
          ports:
            - containerPort: 80
              protocol: TCP
          resources:
            limits:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
            requests:
              cpu: 250m
              ephemeral-storage: 1Gi
              memory: 512Mi
          securityContext:
            capabilities:
              drop:
                - NET_RAW
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.31.1
          command: ["/cloud_sql_proxy"]
          args:
            - "--dir=/cloudsql"
            - "--instances=incubation-ids:europe-west9:my-sql-instance=tcp:5432"
            - "--credential_file=/fastapi/credentials.json"
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
          securityContext:
            capabilities:
              drop:
                - NET_RAW
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
      enableServiceLinks: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: cloud-sql-access
      serviceAccountName: cloud-sql-access
      shareProcessNamespace: false
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Equal
          value: amd64
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloud-sql-instance-credentials
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  name: backend
  namespace: demo-namespace
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 34.118.227.3
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: backend
  sessionAffinity: None
  type: LoadBalancer
 
